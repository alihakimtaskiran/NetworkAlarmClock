#include <ESP8266WiFi.h>
#include <ESP8266mDNS.h>
#include <NTPClient.h>
#include <WiFiUdp.h>
#include <WiFiClient.h>

#ifndef STASSID
#define STASSID "SSID"/fill here name of network
#define STAPSK  "pasword"//fill here password
#endif

const char* ssid = STASSID;
const char* password = STAPSK;
const char *domain="domain";//http://domain.local mDNS adress for NodeMCU server
const int utc=3;//fill here your UTC value. It depends on your geolocation
const int speaker_pin=5;//Replace here with speaker pin

bool got=false;

// The certificate is stored in PMEM
static const uint8_t x509[] PROGMEM = {
  0x30, 0x82, 0x01, 0x3d, 0x30, 0x81, 0xe8, 0x02, 0x09, 0x00, 0xfe, 0x56,
  0x46, 0xf2, 0x78, 0xc6, 0x51, 0x17, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86,
  0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x0b, 0x05, 0x00, 0x30, 0x26, 0x31,
  0x10, 0x30, 0x0e, 0x06, 0x03, 0x55, 0x04, 0x0a, 0x0c, 0x07, 0x45, 0x53,
  0x50, 0x38, 0x32, 0x36, 0x36, 0x31, 0x12, 0x30, 0x10, 0x06, 0x03, 0x55,
  0x04, 0x03, 0x0c, 0x09, 0x31, 0x32, 0x37, 0x2e, 0x30, 0x2e, 0x30, 0x2e,
  0x31, 0x30, 0x1e, 0x17, 0x0d, 0x31, 0x37, 0x30, 0x33, 0x31, 0x38, 0x31,
  0x34, 0x34, 0x39, 0x31, 0x38, 0x5a, 0x17, 0x0d, 0x33, 0x30, 0x31, 0x31,
  0x32, 0x35, 0x31, 0x34, 0x34, 0x39, 0x31, 0x38, 0x5a, 0x30, 0x26, 0x31,
  0x10, 0x30, 0x0e, 0x06, 0x03, 0x55, 0x04, 0x0a, 0x0c, 0x07, 0x45, 0x53,
  0x50, 0x38, 0x32, 0x36, 0x36, 0x31, 0x12, 0x30, 0x10, 0x06, 0x03, 0x55,
  0x04, 0x03, 0x0c, 0x09, 0x31, 0x32, 0x37, 0x2e, 0x30, 0x2e, 0x30, 0x2e,
  0x31, 0x30, 0x5c, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7,
  0x0d, 0x01, 0x01, 0x01, 0x05, 0x00, 0x03, 0x4b, 0x00, 0x30, 0x48, 0x02,
  0x41, 0x00, 0xc6, 0x72, 0x6c, 0x12, 0xe1, 0x20, 0x4d, 0x10, 0x0c, 0xf7,
  0x3a, 0x2a, 0x5a, 0x49, 0xe2, 0x2d, 0xc9, 0x7a, 0x63, 0x1d, 0xef, 0xc6,
  0xbb, 0xa3, 0xd6, 0x6f, 0x59, 0xcb, 0xd5, 0xf6, 0xbe, 0x34, 0x83, 0x33,
  0x50, 0x80, 0xec, 0x49, 0x63, 0xbf, 0xee, 0x59, 0x94, 0x67, 0x8b, 0x8d,
  0x81, 0x85, 0x23, 0x24, 0x06, 0x52, 0x76, 0x55, 0x9d, 0x18, 0x09, 0xb3,
  0x3c, 0x10, 0x40, 0x05, 0x01, 0xf3, 0x02, 0x03, 0x01, 0x00, 0x01, 0x30,
  0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x0b,
  0x05, 0x00, 0x03, 0x41, 0x00, 0x69, 0xdc, 0x6c, 0x9b, 0xa7, 0x62, 0x57,
  0x7e, 0x03, 0x01, 0x45, 0xad, 0x9a, 0x83, 0x90, 0x3a, 0xe7, 0xdf, 0xe8,
  0x8f, 0x46, 0x00, 0xd3, 0x5f, 0x2b, 0x0a, 0xde, 0x92, 0x1b, 0xc5, 0x04,
  0xc5, 0xc0, 0x76, 0xf4, 0xf6, 0x08, 0x36, 0x97, 0x27, 0x82, 0xf1, 0x60,
  0x76, 0xc2, 0xcd, 0x67, 0x6c, 0x4b, 0x6c, 0xca, 0xfd, 0x97, 0xfd, 0x33,
  0x9e, 0x12, 0x67, 0x6b, 0x98, 0x7e, 0xd5, 0x80, 0x8f
};

// And so is the key.  These could also be in DRAM
static const uint8_t rsakey[] PROGMEM = {
  0x30, 0x82, 0x01, 0x3a, 0x02, 0x01, 0x00, 0x02, 0x41, 0x00, 0xc6, 0x72,
  0x6c, 0x12, 0xe1, 0x20, 0x4d, 0x10, 0x0c, 0xf7, 0x3a, 0x2a, 0x5a, 0x49,
  0xe2, 0x2d, 0xc9, 0x7a, 0x63, 0x1d, 0xef, 0xc6, 0xbb, 0xa3, 0xd6, 0x6f,
  0x59, 0xcb, 0xd5, 0xf6, 0xbe, 0x34, 0x83, 0x33, 0x50, 0x80, 0xec, 0x49,
  0x63, 0xbf, 0xee, 0x59, 0x94, 0x67, 0x8b, 0x8d, 0x81, 0x85, 0x23, 0x24,
  0x06, 0x52, 0x76, 0x55, 0x9d, 0x18, 0x09, 0xb3, 0x3c, 0x10, 0x40, 0x05,
  0x01, 0xf3, 0x02, 0x03, 0x01, 0x00, 0x01, 0x02, 0x40, 0x35, 0x0b, 0x74,
  0xd3, 0xff, 0x15, 0x51, 0x44, 0x0f, 0x13, 0x2e, 0x9b, 0x0f, 0x93, 0x5c,
  0x3f, 0xfc, 0xf1, 0x17, 0xf9, 0x72, 0x94, 0x5e, 0xa7, 0xc6, 0xb3, 0xf0,
  0xfe, 0xc9, 0x6c, 0xb1, 0x1e, 0x83, 0xb3, 0xc6, 0x45, 0x3a, 0x25, 0x60,
  0x7c, 0x3d, 0x92, 0x7d, 0x53, 0xec, 0x49, 0x8d, 0xb5, 0x45, 0x10, 0x99,
  0x9b, 0xc6, 0x22, 0x3a, 0x68, 0xc7, 0x13, 0x4e, 0xb6, 0x04, 0x61, 0x21,
  0x01, 0x02, 0x21, 0x00, 0xea, 0x8c, 0x21, 0xd4, 0x7f, 0x3f, 0xb6, 0x91,
  0xfa, 0xf8, 0xb9, 0x2d, 0xcb, 0x36, 0x36, 0x02, 0x5f, 0xf0, 0x0c, 0x6e,
  0x87, 0xaa, 0x5c, 0x14, 0xf6, 0x56, 0x8e, 0x12, 0x92, 0x25, 0xde, 0xb3,
  0x02, 0x21, 0x00, 0xd8, 0x99, 0x01, 0xf1, 0x04, 0x0b, 0x98, 0xa3, 0x71,
  0x56, 0x1d, 0xea, 0x6f, 0x45, 0xd1, 0x36, 0x70, 0x76, 0x8b, 0xab, 0x69,
  0x30, 0x58, 0x9c, 0xe0, 0x45, 0x97, 0xe7, 0xb6, 0xb5, 0xef, 0xc1, 0x02,
  0x21, 0x00, 0xa2, 0x01, 0x06, 0xc0, 0xf2, 0xdf, 0xbc, 0x28, 0x1a, 0xb4,
  0xbf, 0x9b, 0x5c, 0xd8, 0x65, 0xf7, 0xbf, 0xf2, 0x5b, 0x73, 0xe0, 0xeb,
  0x0f, 0xcd, 0x3e, 0xd5, 0x4c, 0x2e, 0x91, 0x99, 0xec, 0xb7, 0x02, 0x20,
  0x4b, 0x9d, 0x46, 0xd7, 0x3c, 0x01, 0x4c, 0x5d, 0x2a, 0xb0, 0xd4, 0xaa,
  0xc6, 0x03, 0xca, 0xa0, 0xc5, 0xac, 0x2c, 0xe0, 0x3f, 0x4d, 0x98, 0x71,
  0xd3, 0xbd, 0x97, 0xe5, 0x55, 0x9c, 0xb8, 0x41, 0x02, 0x20, 0x02, 0x42,
  0x9f, 0xd1, 0x06, 0x35, 0x3b, 0x42, 0xf5, 0x64, 0xaf, 0x6d, 0xbf, 0xcd,
  0x2c, 0x3a, 0xcd, 0x0a, 0x9a, 0x4d, 0x7c, 0xad, 0x29, 0xd6, 0x36, 0x57,
  0xd5, 0xdf, 0x34, 0xeb, 0x26, 0x03
};


// Create an instance of the server
// specify the port to listen on as an argument
WiFiServerSecure server(443);

WiFiUDP ntpUDP;
NTPClient timeClient(ntpUDP, "pool.ntp.org");

void setup() {
  Serial.begin(1000000);

  // prepare GPIO2
  pinMode(2, OUTPUT);
  digitalWrite(2,HIGH);

  // Connect to WiFi network
  Serial.println();
  Serial.println();
  Serial.print("Connecting to ");
  Serial.println(ssid);

  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("");
  Serial.println("WiFi connected");

  // Set the certificates from PMEM (if using DRAM remove the _P from the call)
  server.setServerKeyAndCert_P(rsakey, sizeof(rsakey), x509, sizeof(x509));

  // Start the server

      if (!MDNS.begin(domain)) {
    Serial.println("Error setting up MDNS responder!");
    while (1) {
      delay(1000);
    }
  }
  Serial.println("mDNS responder started");
  
  server.begin();
  Serial.println("Server started");
  MDNS.addService("https", "tcp", 443);

  // Print the IP address
  Serial.println(WiFi.localIP());

  timeClient.begin();
  // Set offset time in seconds to adjust for your timezone, for example:
  // GMT +1 = 3600
  // GMT +8 = 28800
  // GMT -1 = -3600
  // GMT 0 = 0
  timeClient.setTimeOffset(utc);//I'm located in GMT+3


  
}

void loop() {

  // Check if a client has connected
  WiFiClientSecure client = server.available();
  if (!client) {
  digitalWrite(2,HIGH);
  MDNS.update();
  if(got==false&&millis()%5000<100){
  handle_timer();
  got=true;
  }
if(got==true&&millis()%5000>4900){
  got=false;
}
 return;
  }
  digitalWrite(2,LOW);
  // Wait until the client sends some data
  Serial.println("new client");
  unsigned long timeout = millis() + 3000;
  while (!client.available() && millis() < timeout) {
    delay(1);
  }
  if (millis() > timeout) {
    Serial.println("timeout");
    client.flush();
    client.stop();
    return;
  }

  // Read the first line of the request
  String req = client.readStringUntil('\r');
  IPAddress client_ip=client.remoteIP();
  Serial.println(client_ip);
  Serial.println(req);
  client.flush();

  // Match the request
 
   

   if((req.indexOf("GET / ") != -1)||(req.indexOf("GET /index.html") != -1)){
        client.print("HTTP/1.1 200 OK\r\nContent-Type: text/html\r\n\r\n<!DOCTYPE HTML><html><head><title>Q-Server</title></head><body><pre>Hello World from Q-Server</pre><pre>Get time <a href=\"time\">here</a></pre><pre>Get server's uptime <a href=\"uptime\">here</a></pre><pre>Get your IP addres <a href=\"ipaddr\">here</a></pre></body></html>");
  }
  else if(req.indexOf("GET /uptime") != -1){
    unsigned long tmp=millis();
    byte uptime[4];//day,hour, min,sec
     
    uptime[0]=tmp/86400000;
    uptime[1]=tmp/3600000-24*uptime[0];
    if(uptime[1]>23){
      uptime[1]=uptime[1]%60;
    }
    uptime[2]=tmp/60000-60*uptime[1];
        if(uptime[2]>59){
      uptime[2]=uptime[2]%60;
    }
    uptime[3]=tmp/1000-60*uptime[2];
    if(uptime[3]>59){
      uptime[3]=uptime[3]%60;
    }


    String rp="HTTP/1.1 200 OK\r\nContent-Type: text/html\r\n\r\n<!DOCTYPE HTML><html><head><title>Q-Server|Uptime</title></head><body><h2>Uptime</h2><pre>";
    rp+=String(uptime[0])+" days</pre><pre>";
    rp+=String(uptime[1])+" hours</pre><pre>";
    rp+=String(uptime[2])+" minutes</pre><pre>";
    rp+=String(uptime[3])+" seconds</pre><pre>";
    rp+=String(tmp);
    rp+="</pre><pre><a href=\"../\">Main</a></pre></body></html>";
    client.print(rp);
  }
  else if(req.indexOf("GET /time") != -1){
 
    String rp="HTTP/1.1 200 OK\r\nContent-Type: text/html\r\n\r\n<!DOCTYPE HTML><html><head><title>Q-Server|Time</title></head><body><h2>Time is ";
    rp+=timeClient.getFormattedTime();
    rp+="</h2><a href=\"/index.html\">Main</a></body></html>";
    client.print(rp);
    
  }
  else if(req.indexOf("GET /ip ") != -1){
    
    String rp="HTTP/1.1 200 OK\r\nContent-Type: text/plain \r\n\r\n";
    rp+=String(client_ip[0])+".";
    rp+=String(client_ip[1])+".";
    rp+=String(client_ip[2])+".";
    rp+=String(client_ip[3]);
    client.print(rp);
  }
  else if(req.indexOf("GET /ipaddr") != -1){
    String rp="HTTP/1.1 200 OK\r\nContent-Type: text/html\r\n\r\n<!DOCTYPE HTML><html><head><title>Q-Server|IP</title></head><body><h2>Your IP is ";
    rp+=String(client_ip[0])+".";
    rp+=String(client_ip[1])+".";
    rp+=String(client_ip[2])+".";
    rp+=String(client_ip[3]);
    rp+="</h2><a href=\"/index.html\">Main</a></body></html>";
    client.print(rp);
  }
else {
    client.print("HTTP/1.1 404 Not Found\r\nContent-Type: text/html\r\n\r\n<!DOCTYPE HTML>\r\n<html><body><title>Q-Server|404</title>Not found<br><a href=\"/index.html\">Main</a></body></html>");
    Serial.println("invalid request");

    return;
  }
 

  client.flush();

 

  // Send the response to the client
  delay(1);
  Serial.println("Client disconnected");

  // The client will actually be disconnected
  // when the function returns and 'client' object is detroyed
handle_timer();
Serial.println("Iterating");
}

void handle_timer(){
  Serial.println("Handling timer..");
  timeClient.update();

  int hour = timeClient.getHours();
  Serial.print("Hour: ");
  Serial.println(hour);  

  int minute = timeClient.getMinutes();
  Serial.print("Minutes: ");
  Serial.println(minute); 
   
  int sec = timeClient.getSeconds();
  Serial.print("Seconds: ");
  Serial.println(sec);  
  if(hour>5){
    delay(5);//Extra time delays in order to avoid errors. NodeMCU has a bug which reboots the system as we perform new logic expression in another logic expression
    if(hour==8&&minute==30&&sec<7){
      //waking up
      tone(speaker_pin,180);
      delay(10000);
      noTone(speaker_pin);
      delay(700);
      tone(speaker_pin,180);
      delay(10000);
      noTone(speaker_pin);
      delay(700);
      tone(speaker_pin,180);
      delay(10000);
      noTone(speaker_pin);
      tone(speaker_pin,180);
      delay(10000);
      noTone(speaker_pin);     

    }
    else if(minute==0&&sec<7){//3 short beep hourly
      tone(speaker_pin,271);
      delay(500);
      noTone(speaker_pin);
      delay(500);
      tone(speaker_pin,271);
      delay(500);
      noTone(speaker_pin);
      delay(500);
      tone(speaker_pin,271);
      delay(500);
      noTone(speaker_pin);
      delay(5000);

    }
    else if(minute%15==0&&sec<7){//A beep for every 15 minutes
      tone(speaker_pin,271);
      delay(1000);
      noTone(speaker_pin);  
      delay(5000);

    }
    else{
      delayMicroseconds(1);
      }
  }
}
